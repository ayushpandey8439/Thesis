
%Entries
inproceedings{cypher,
	author = {Francis, Nadime and Green, Alastair and Guagliardo, Paolo and Libkin, Leonid and Lindaaker, Tobias and Marsault, Victor and Plantikow, Stefan and Rydberg, Mats and Selmer, Petra and Taylor, Andr\'{e}s},
	title = {Cypher: An Evolving Query Language for Property Graphs},
	year = {2018},
	isbn = {9781450347037},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3183713.3190657},
	doi = {10.1145/3183713.3190657},
	abstract = {The Cypher property graph query language is an evolving language, originally designed and implemented as part of the Neo4j graph database, and it is currently used by several commercial database products and researchers. We describe Cypher 9, which is the first version of the language governed by the openCypher Implementers Group. We first introduce the language by example, and describe its uses in industry. We then provide a formal semantic definition of the core read-query features of Cypher, including its variant of the property graph data model, and its ASCII Art graph pattern matching mechanism for expressing subgraphs of interest to an application. We compare the features of Cypher to other property graph query languages, and describe extensions, at an advanced stage of development, which will form part of Cypher 10, turning the language into a compositional language which supports graph projections and multiple named graphs.},
	booktitle = {Proceedings of the 2018 International Conference on Management of Data},
	pages = {1433–1445},
	numpages = {13},
	keywords = {cypher, graph databases, query language, formal specification, property graphs, formal semantics},
	location = {Houston, TX, USA},
	series = {SIGMOD '18}
}
@article{euler1741solutio,
  title={Solutio problematis ad geometriam situs pertinentis},
  author={Euler, Leonhard},
  journal={Commentarii academiae scientiarum Petropolitanae},
  pages={128--140},
  year={1741}
}


@inproceedings{gray1975granularity,
	author       = {Jim Gray and
                  Raymond A. Lorie and
                  Gianfranco R. Putzolu and
                  Irving L. Traiger},
  editor       = {Douglas S. Kerr},
  title        = {Granularity of Locks in a Large Shared Data Base},
  booktitle    = {Proceedings of the International Conference on Very Large Data Bases,
                  September 22-24, 1975, Framingham, Massachusetts, {USA}},
  pages        = {428--451},
  publisher    = {{ACM}},
  year         = {1975},
  url          = {https://doi.org/10.1145/1282480.1282513},
  doi          = {10.1145/1282480.1282513},
  timestamp    = {Tue, 06 Nov 2018 16:57:17 +0100},
  biburl       = {https://dblp.org/rec/conf/vldb/GrayLPT75.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{lamportPaxos,
	author = {Lamport, Leslie},
	title = {The Part-Time Parliament},
	year = {1998},
	issue_date = {May 1998},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {16},
	number = {2},
	issn = {0734-2071},
	url = {https://doi.org/10.1145/279227.279229},
	doi = {10.1145/279227.279229},
	abstract = {Recent archaeological discoveries on the island of Paxos reveal that the parliament functioned despite the peripatetic propensity of its part-time legislators. The legislators maintained consistent copies of the parliamentary record, despite their frequent forays from the chamber and the forgetfulness of their messengers. The Paxon parliament's protocol provides a new way of implementing the state machine approach to the design of distributed systems.},
	journal = {ACM Trans. Comput. Syst.},
	month = {may},
	pages = {133–169},
	numpages = {37},
	keywords = {three-phase commit, state machines, voting}
}




@inproceedings{chatterjee2014efficient,
  author       = {Bapi Chatterjee and
                  Nhan Nguyen Dang and
                  Philippas Tsigas},
  editor       = {Magn{\'{u}}s M. Halld{\'{o}}rsson and
                  Shlomi Dolev},
  title        = {Efficient lock-free binary search trees},
  booktitle    = {{ACM} Symposium on Principles of Distributed Computing, {PODC} '14,
                  Paris, France, July 15-18, 2014},
  pages        = {322--331},
  publisher    = {{ACM}},
  year         = {2014},
  url          = {https://doi.org/10.1145/2611462.2611500},
  doi          = {10.1145/2611462.2611500},
  timestamp    = {Tue, 06 Nov 2018 11:07:18 +0100},
  biburl       = {https://dblp.org/rec/conf/podc/ChatterjeeDT13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{natarajan2013concurrent,
	 author       = {Aravind Natarajan and
                  Lee Savoie and
                  Neeraj Mittal},
  editor       = {Marcos K. Aguilera},
  title        = {Brief Announcement: Concurrent Wait-Free Red-Black Trees},
  booktitle    = {Distributed Computing - 26th International Symposium, {DISC} 2012,
                  Salvador, Brazil, October 16-18, 2012. Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {7611},
  pages        = {421--422},
  publisher    = {Springer},
  year         = {2012},
  url          = {https://doi.org/10.1007/978-3-642-33651-5\_38},
  doi          = {10.1007/978-3-642-33651-5\_38},
  timestamp    = {Tue, 14 May 2019 10:00:54 +0200},
  biburl       = {https://dblp.org/rec/conf/wdag/NatarajanSM12.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{sundell2005fast,
author       = {H{\aa}kan Sundell and
                  Philippas Tsigas},
  title        = {Fast and Lock-Free Concurrent Priority Queues for Multi-Thread Systems},
  booktitle    = {17th International Parallel and Distributed Processing Symposium {(IPDPS}
                  2003), 22-26 April 2003, Nice, France, CD-ROM/Abstracts Proceedings},
  pages        = {84},
  publisher    = {{IEEE} Computer Society},
  year         = {2003},
  url          = {https://doi.org/10.1109/IPDPS.2003.1213189},
  doi          = {10.1109/IPDPS.2003.1213189},
  timestamp    = {Fri, 24 Mar 2023 00:02:00 +0100},
  biburl       = {https://dblp.org/rec/conf/ipps/SundellT03.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{letia2009crdts,
  author       = {Mihai Letia and
                  Nuno M. Pregui{\c{c}}a and
                  Marc Shapiro},
  title        = {CRDTs: Consistency without concurrency control},
  journal      = {CoRR},
  volume       = {abs/0907.0929},
  year         = {2009},
  url          = {http://arxiv.org/abs/0907.0929},
  eprinttype    = {arXiv},
  eprint       = {0907.0929},
  timestamp    = {Mon, 13 Aug 2018 16:46:12 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-0907-0929.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{kaki2019mergeable,
	  author       = {Gowtham Kaki and
                  Swarn Priya and
                  K. C. Sivaramakrishnan and
                  Suresh Jagannathan},
  title        = {Mergeable replicated data types},
  journal      = {Proc. {ACM} Program. Lang.},
  volume       = {3},
  number       = {{OOPSLA}},
  pages        = {154:1--154:29},
  year         = {2019},
  url          = {https://doi.org/10.1145/3360580},
  doi          = {10.1145/3360580},
  timestamp    = {Wed, 17 Feb 2021 08:54:05 +0100},
  biburl       = {https://dblp.org/rec/journals/pacmpl/KakiPSJ19.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{valois1995lock,
 author       = {John D. Valois},
  editor       = {James H. Anderson},
  title        = {Lock-Free Linked Lists Using Compare-and-Swap},
  booktitle    = {Proceedings of the Fourteenth Annual {ACM} Symposium on Principles
                  of Distributed Computing, Ottawa, Ontario, Canada, August 20-23, 1995},
  pages        = {214--222},
  publisher    = {{ACM}},
  year         = {1995},
  url          = {https://doi.org/10.1145/224964.224988},
  doi          = {10.1145/224964.224988},
  timestamp    = {Tue, 06 Nov 2018 11:07:18 +0100},
  biburl       = {https://dblp.org/rec/conf/podc/Valois95.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{StonebrakerGranularity,
 author       = {Daniel R. Ries and
                  Michael Stonebraker},
  title        = {Effects of Locking Granularity in a Database Management System},
  journal      = {{ACM} Trans. Database Syst.},
  volume       = {2},
  number       = {3},
  pages        = {233--246},
  year         = {1977},
  url          = {https://doi.org/10.1145/320557.320566},
  doi          = {10.1145/320557.320566},
  timestamp    = {Tue, 06 Nov 2018 12:51:48 +0100},
  biburl       = {https://dblp.org/rec/journals/tods/RiesS77.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{sqlIntentionLocks,
 	title={Transaction locking and Row Versioning Guide - SQL Server},
 	url={https://learn.microsoft.com/en-us/sql/relational-databases/sql-server-transaction-locking-and-row-versioning-guide?source=recommendations\%3bview\%3dsql-server-ver16\#lock_modes},
  	journal={SQL Server | Microsoft Learn},
	publisher={Microsoft},
	year={2022},
	month={Dec}
 }

@inproceedings{kalikar2016domlock,
  author       = {Saurabh Kalikar and
                  Rupesh Nasre},
  editor       = {Rafael Asenjo and
                  Tim Harris},
  title        = {DomLock: a new multi-granularity locking technique for hierarchies},
  booktitle    = {Proceedings of the 21st {ACM} {SIGPLAN} Symposium on Principles and
                  Practice of Parallel Programming, PPoPP 2016, Barcelona, Spain, March
                  12-16, 2016},
  pages        = {23:1--23:12},
  publisher    = {{ACM}},
  year         = {2016},
  url          = {https://doi.org/10.1145/2851141.2851164},
  doi          = {10.1145/2851141.2851164},
  timestamp    = {Sun, 12 Jun 2022 19:46:08 +0200},
  biburl       = {https://dblp.org/rec/conf/ppopp/KalikarN16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{anjuMID,
	author       = {M. A. Anju and
                  Rupesh Nasre},
  title        = {Multi-Interval DomLock: Toward Improving Concurrency in Hierarchies},
  journal      = {{ACM} Trans. Parallel Comput.},
  volume       = {9},
  number       = {3},
  pages        = {12:1--12:27},
  year         = {2022},
  url          = {https://doi.org/10.1145/3543543},
  doi          = {10.1145/3543543},
  timestamp    = {Tue, 18 Oct 2022 22:18:47 +0200},
  biburl       = {https://dblp.org/rec/journals/topc/AnjuN22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

inproceedings{aho1973finding,
	title={On finding lowest common ancestors in trees},
	author={Aho, Alfred V and Hopcroft, John E and Ullman, Jeffrey D},
	booktitle={Proceedings of the fifth annual ACM symposium on Theory of computing},
	pages={253--265},
	year={1973}
}

@article{fischer2010new,
	author       = {Johannes Fischer and
                  Daniel H. Huson},
  title        = {New common ancestor problems in trees and directed acyclic graphs},
  journal      = {Inf. Process. Lett.},
  volume       = {110},
  number       = {8-9},
  pages        = {331--335},
  year         = {2010},
  url          = {https://doi.org/10.1016/j.ipl.2010.02.014},
  doi          = {10.1016/j.ipl.2010.02.014},
  timestamp    = {Fri, 26 May 2017 22:54:45 +0200},
  biburl       = {https://dblp.org/rec/journals/ipl/FischerH10.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{guerraoui2006stmbench7,
	author       = {Rachid Guerraoui and
                  Michal Kapalka and
                  Jan Vitek},
  editor       = {Paulo Ferreira and
                  Thomas R. Gross and
                  Lu{\'{\i}}s Veiga},
  title        = {STMBench7: a benchmark for software transactional memory},
  booktitle    = {Proceedings of the 2007 EuroSys Conference, Lisbon, Portugal, March
                  21-23, 2007},
  pages        = {315--324},
  publisher    = {{ACM}},
  year         = {2007},
  url          = {https://doi.org/10.1145/1272996.1273029},
  doi          = {10.1145/1272996.1273029},
  timestamp    = {Wed, 07 Dec 2022 23:10:57 +0100},
  biburl       = {https://dblp.org/rec/conf/eurosys/GuerraouiKV07.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


article{carey1993007,
	title={The 007 benchmark},
	author={Carey, Michael J and DeWitt, David J and Naughton, Jeffrey F},
	journal={ACM SIGMOD Record},
	volume={22},
	number={2},
	pages={12--21},
	year={1993},
	publisher={ACM New York, NY, USA}
}
@misc{Oracle_2023, title={Database concepts- Logical structures}, url={https://docs.oracle.com/en/database/oracle/oracle-database/23/cncpt/logical-storage-structures.html#GUID-52FE1A8C-74EA-4B81-B1AC-69FD34252659}, journal={Oracle Help Center}, author={Oracle}, year={2023}, month={Dec}} 

@inproceedings{liu_unleashing_2014,
	author       = {Peng Liu and
                  Charles Zhang},
  editor       = {Pankaj Jalote and
                  Lionel C. Briand and
                  Andr{\'{e}} van der Hoek},
  title        = {Unleashing concurrency for irregular data structures},
  booktitle    = {36th International Conference on Software Engineering, {ICSE} '14,
                  Hyderabad, India - May 31 - June 07, 2014},
  pages        = {480--490},
  publisher    = {{ACM}},
  year         = {2014},
  url          = {https://doi.org/10.1145/2568225.2568277},
  doi          = {10.1145/2568225.2568277},
  timestamp    = {Tue, 06 Nov 2018 11:06:54 +0100},
  biburl       = {https://dblp.org/rec/conf/icse/0010Z14.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{10.1145/3404397.3404398,
	author = {Devadas, Vinay and Curtis-Maury, Matthew},
	title = {Scalable Coordination of Hierarchical Parallelism},
	year = {2020},
	isbn = {9781450388160},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3404397.3404398},
	doi = {10.1145/3404397.3404398},
	abstract = {Given continually increasing core counts, multiprocessor software scaling is critical. One set of applications that is especially difficult to parallelize efficiently are those that operate on hierarchical data. In such applications, correct execution relies on all threads coordinating their accesses within the hierarchy. At the same time, high-performance execution requires that this coordination be efficient and that it maximize parallelism. In this paper, we identify two key scalability bottlenecks in the coordination of hierarchical parallelism by studying the hierarchical data partitioning framework within the NetApp® WAFL® file system. We first observe that the global synchronization required to enforce the hierarchical constraints limits performance on increased core counts. We thus propose a distributed architecture, called Scheduler Pools, that divides the hierarchy into disjoint subhierarchies that can be managed independently in the common case, thereby reducing coordination overhead. We next observe that periodically draining all in-flight operations in order to facilitate the execution of coarse-grained operations in the hierarchy results in an excess of idle CPU cycles. To address this issue, we propose a new scheme, called Hierarchy-Aware Draining, that minimizes wasted CPU cycles by draining only those regions of the hierarchy that are required to execute the desired operation. When implemented together in the context of WAFL, Scheduler Pools and Hierarchy-Aware Draining overcome the observed scalability bottlenecks. Our evaluation with a range of benchmarks on high-end storage systems shows throughput gains of up to 33\% and reductions in latency of up to 64\%.},
	booktitle = {Proceedings of the 49th International Conference on Parallel Processing},
	articleno = {77},
	numpages = {11},
	location = {Edmonton, AB, Canada},
	series = {ICPP '20}
}


@phdthesis{nair_designing_2021,
	author       = {Sreeja Sasidharan Nair},
  title        = {Designing safe and highly available distributed applications. (Conception
                  d'applications distribu{\'{e}}es s{\^{u}}res et hautement disponibles)},
  school       = {Sorbonne University, Paris, France},
  year         = {2021},
  url          = {https://tel.archives-ouvertes.fr/tel-03339393},
  timestamp    = {Thu, 06 Jan 2022 07:55:01 +0100},
  biburl       = {https://dblp.org/rec/phd/hal/Nair21.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@incollection{10.5555/36160.36162,
	author       = {Gul Agha and
                  Carl Hewitt},
  editor       = {Bruce D. Shriver and
                  Peter Wegner},
  title        = {Actors: {A} Conceptual Foundation for Concurrent Object-Oriented Programming},
  booktitle    = {Research Directions in Object-Oriented Programming},
  pages        = {49--74},
  publisher    = {{MIT} Press},
  year         = {1987},
  timestamp    = {Tue, 06 Aug 2019 13:59:35 +0200},
  biburl       = {https://dblp.org/rec/books/mit/shriverW87/AghaH87.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{sang_scalable_2020,
	author       = {Bo Sang and
                  Patrick Eugster and
                  Gustavo Petri and
                  Srivatsan Ravi and
                  Pierre{-}Louis Roman},
  title        = {Scalable and serializable networked multi-actor programming},
  journal      = {Proc. {ACM} Program. Lang.},
  volume       = {4},
  number       = {{OOPSLA}},
  pages        = {198:1--198:30},
  year         = {2020},
  url          = {https://doi.org/10.1145/3428266},
  doi          = {10.1145/3428266},
  timestamp    = {Sat, 08 Jan 2022 02:21:40 +0100},
  biburl       = {https://dblp.org/rec/journals/pacmpl/SangEPRR20.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{kalikar_toggle_2019,
	 author       = {Saurabh Kalikar and
                  Rupesh Nasre},
  editor       = {Ramin Yahyapour},
  title        = {Toggle: Contention-Aware Task Scheduler for Concurrent Hierarchical
                  Operations},
  booktitle    = {Euro-Par 2019: Parallel Processing - 25th International Conference
                  on Parallel and Distributed Computing, G{\"{o}}ttingen, Germany,
                  August 26-30, 2019, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {11725},
  pages        = {142--155},
  publisher    = {Springer},
  year         = {2019},
  url          = {https://doi.org/10.1007/978-3-030-29400-7\_11},
  doi          = {10.1007/978-3-030-29400-7\_11},
  timestamp    = {Mon, 19 Aug 2019 16:45:40 +0200},
  biburl       = {https://dblp.org/rec/conf/europar/KalikarN19.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{hutchison_reasoning_2012,
	author       = {Peter Hawkins and
                  Alex Aiken and
                  Kathleen Fisher and
                  Martin C. Rinard and
                  Mooly Sagiv},
  editor       = {Helmut Seidl},
  title        = {Reasoning about Lock Placements},
  booktitle    = {Programming Languages and Systems - 21st European Symposium on Programming,
                  {ESOP} 2012, Held as Part of the European Joint Conferences on Theory
                  and Practice of Software, {ETAPS} 2012, Tallinn, Estonia, March 24
                  - April 1, 2012. Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {7211},
  pages        = {336--356},
  publisher    = {Springer},
  year         = {2012},
  url          = {https://doi.org/10.1007/978-3-642-28869-2\_17},
  doi          = {10.1007/978-3-642-28869-2\_17},
  timestamp    = {Tue, 14 May 2019 10:00:41 +0200},
  biburl       = {https://dblp.org/rec/conf/esop/HawkinsAFRS12.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{atomicsectionlocks,
	author = {Cherem, Sigmund and Chilimbi, Trishul and Gulwani, Sumit},
	title = {Inferring Locks for Atomic Sections},
	year = {2008},
	issue_date = {June 2008},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {43},
	number = {6},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/1379022.1375619},
	doi = {10.1145/1379022.1375619},
	abstract = {Atomic sections are a recent and popular idiom to support the development of concurrent programs. Updates performed within an atomic section should not be visible to other threads until the atomic section has been executed entirely. Traditionally, atomic sections are supported through the use of optimistic concurrency, either using a transactional memory hardware, or an equivalent software emulation (STM).This paper explores automatically supporting atomic sections using pessimistic concurrency. We present a system that combines compiler and runtime techniques to automatically transform programs written with atomic sections into programs that only use locking primitives. To minimize contention in the transformed programs, our compiler chooses from several lock granularities, using fine-grain locks whenever it is possible.This paper formally presents our framework, shows that our compiler is sound (i.e., it protects all shared locations accessed within atomic sections), and reports experimental results.},
	journal = {SIGPLAN Not.},
	month = {jun},
	pages = {304–315},
	numpages = {12},
	keywords = {static lock inference, atomic sections, concurrency}
}

@inproceedings{10.1145/1375581.1375619,
	author       = {Sigmund Cherem and
                  Trishul M. Chilimbi and
                  Sumit Gulwani},
  editor       = {Rajiv Gupta and
                  Saman P. Amarasinghe},
  title        = {Inferring locks for atomic sections},
  booktitle    = {Proceedings of the {ACM} {SIGPLAN} 2008 Conference on Programming
                  Language Design and Implementation, Tucson, AZ, USA, June 7-13, 2008},
  pages        = {304--315},
  publisher    = {{ACM}},
  year         = {2008},
  url          = {https://doi.org/10.1145/1375581.1375619},
  doi          = {10.1145/1375581.1375619},
  timestamp    = {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl       = {https://dblp.org/rec/conf/pldi/CheremCG08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}



@inproceedings{preguicca2009commutative,
	author       = {Nuno M. Pregui{\c{c}}a and
                  Joan Manuel Marqu{\`{e}}s and
                  Marc Shapiro and
                  Mihai Letia},
  title        = {A Commutative Replicated Data Type for Cooperative Editing},
  booktitle    = {29th {IEEE} International Conference on Distributed Computing Systems
                  {(ICDCS} 2009), 22-26 June 2009, Montreal, Qu{\'{e}}bec, Canada},
  pages        = {395--403},
  publisher    = {{IEEE} Computer Society},
  year         = {2009},
  url          = {https://doi.org/10.1109/ICDCS.2009.20},
  doi          = {10.1109/ICDCS.2009.20},
  timestamp    = {Fri, 24 Mar 2023 00:04:19 +0100},
  biburl       = {https://dblp.org/rec/conf/icdcs/PreguicaMSL09.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{kimura2012efficient,
	author       = {Hideaki Kimura and
                  Goetz Graefe and
                  Harumi A. Kuno},
  editor       = {Rajesh Bordawekar and
                  Christian A. Lang},
  title        = {Efficient Locking Techniques for Databases on Modern Hardware},
  booktitle    = {International Workshop on Accelerating Data Management Systems Using
                  Modern Processor and Storage Architectures - {ADMS} 2012, Istanbul,
                  Turkey, August 27, 2012},
  pages        = {1--12},
  year         = {2012},
  url          = {http://www.adms-conf.org/kimura\_adms12.pdf},
  timestamp    = {Tue, 18 Jan 2022 09:45:51 +0100},
  biburl       = {https://dblp.org/rec/conf/vldb/KimuraGK12.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{sharir1981strong,
	title={A strong-connectivity algorithm and its applications in data flow analysis},
	author={Sharir, Micha},
	journal={Computers \& Mathematics with Applications},
	volume={7},
	number={1},
	pages={67--72},
	year={1981},
	publisher={Elsevier}
}


@article{tarjan1972depth,
	author       = {Robert Endre Tarjan},
  title        = {Depth-First Search and Linear Graph Algorithms},
  journal      = {{SIAM} J. Comput.},
  volume       = {1},
  number       = {2},
  pages        = {146--160},
  year         = {1972},
  url          = {https://doi.org/10.1137/0201010},
  doi          = {10.1137/0201010},
  timestamp    = {Wed, 14 Nov 2018 10:45:08 +0100},
  biburl       = {https://dblp.org/rec/journals/siamcomp/Tarjan72.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{cheriyan1996algorithms,
	author       = {Joseph Cheriyan and
                  Kurt Mehlhorn},
  title        = {Algorithms for Dense Graphs and Networks on the Random Access Computer},
  journal      = {Algorithmica},
  volume       = {15},
  number       = {6},
  pages        = {521--549},
  year         = {1996},
  url          = {https://doi.org/10.1007/BF01940880},
  doi          = {10.1007/BF01940880},
  timestamp    = {Wed, 14 Nov 2018 10:49:05 +0100},
  biburl       = {https://dblp.org/rec/journals/algorithmica/CheriyanM96.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}



@article{walsh2006hub,
	author       = {Tracy Grauman and
                  Stephen G. Hartke and
                  Adam S. Jobson and
                  William B. Kinnersley and
                  Douglas B. West and
                  Lesley Wiglesworth and
                  Pratik Worah and
                  Hehui Wu},
  title        = {The hub number of a graph},
  journal      = {Inf. Process. Lett.},
  volume       = {108},
  number       = {4},
  pages        = {226--228},
  year         = {2008},
  url          = {https://doi.org/10.1016/j.ipl.2008.05.022},
  doi          = {10.1016/j.ipl.2008.05.022},
  timestamp    = {Thu, 14 Oct 2021 09:41:01 +0200},
  biburl       = {https://dblp.org/rec/journals/ipl/GraumanHJKWWWW08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
misc{neo4jIndex, title={Indexes for search performance - cypher manual}, url={https://neo4j.com/docs/cypher-manual/current/indexes-for-search-performance/}, journal={Neo4j Graph Data Platform}, author={Neo4j Inc.}}
@misc{snapnets,
  author       = {Jure Leskovec and Andrej Krevl},
  title        = {{SNAP Datasets}: {Stanford} Large Network Dataset Collection},
  howpublished = {\url{http://snap.stanford.edu/data}},
  month        = jun,
  year         = 2014
}

@inproceedings{LepersNVME,
	author = {Lepers, Baptiste and Balmau, Oana and Gupta, Karan and Zwaenepoel, Willy},
	title = {KVell: The Design and Implementation of a Fast Persistent Key-Value Store},
	year = {2019},
	isbn = {9781450368735},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3341301.3359628},
	doi = {10.1145/3341301.3359628},
	abstract = {Modern block-addressable NVMe SSDs provide much higher bandwidth and similar performance for random and sequential access. Persistent key-value stores (KVs) designed for earlier storage devices, using either Log-Structured Merge (LSM) or B trees, do not take full advantage of these new devices. Logic to avoid random accesses, expensive operations for keeping data sorted on disk, and synchronization bottlenecks make these KVs CPU-bound on NVMe SSDs.We present a new persistent KV design. Unlike earlier designs, no attempt is made at sequential access, and data is not sorted when stored on disk. A shared-nothing philosophy is adopted to avoid synchronization overhead. Together with batching of device accesses, these design decisions make for read and write performance close to device bandwidth. Finally, maintaining an inexpensive partial sort in memory produces adequate scan performance.We implement this design in KVell, the first persistent KV able to utilize modern NVMe SSDs at maximum bandwidth. We compare KVell against available state-of-the-art LSM and B tree KVs, both with synthetic benchmarks and production workloads. KVell achieves throughput at least 2x that of its closest competitor on read-dominated workloads, and 5x on write-dominated workloads. For workloads that contain mostly scans, KVell performs comparably or better than its competitors. KVell provides maximum latencies an order of magnitude lower than the best of its competitors, even on scan-based workloads.},
	booktitle = {Proceedings of the 27th ACM Symposium on Operating Systems Principles},
	pages = {447–461},
	numpages = {15},
	keywords = {performance, B+ tree, persistence, key-value store, NVMe, log-structured merge tree (LSM), SSD},
	location = {Huntsville, Ontario, Canada},
	series = {SOSP '19}
}


@book{kulish2006hierarchical,
  title={Hierarchical Methods: Hierarchy and Hierarchical Asymptotic Methods in Electrodynamics, Volume 1},
  author={Kulish, V},
  volume={123},
  year={2006},
  publisher={Springer Science \& Business Media}
}

@article{lometKeyRanges,
author = {Lomet, David and Mokbel, Mohamed F.},
title = {Locking key ranges with unbundled transaction services},
year = {2009},
issue_date = {August 2009},
publisher = {VLDB Endowment},
volume = {2},
number = {1},
issn = {2150-8097},
url = {https://doi.org/10.14778/1687627.1687658},
doi = {10.14778/1687627.1687658},
abstract = {To adapt database technology to new environments like cloud platforms or multi-core hardware, or to try anew to provide an extensible database platform, it is useful to separate transaction services from data management elements that need close physical proximity to data. With "generic" transactional services of concurrency control and recovery in a separate transactional component (TC), indexing, cache and disk management, now in a data component (DC), can be simplified and tailored more easily to the platform or to a data type extension with a special purpose index. This decomposition requires that details of the DC's management of data be hidden from the TC. Thus, locking and logging need to be "logical", which poses a number of problems. One problem is the handling of locking for ranges of keys. Locks need to be taken at the TC prior to the records and their keys being known to the TC. We describe generic two approaches for dealing with this. (1) Make a "speculative" visit" to the DC to learn key values. (2) Lock a "covering resource" first, then learn and lock key values and ultimately release the covering resource lock. The "table" is the only logical (and hence known to the TC) covering resourse in the traditional locking hierarchy, but using it limits concurrency. Concurrency is improved with the introduction of new partition resources. We show how partitions as covering resources combine high concurrency with low locking overhead. Using partitions is sufficiently effective to consider adapting it for a traditional database kernel.},
journal = {Proc. VLDB Endow.},
month = {aug},
pages = {265–276},
numpages = {12}
}

@article{grayPredicateLocks,
author = {Eswaran, K. P. and Gray, J. N. and Lorie, R. A. and Traiger, I. L.},
title = {The notions of consistency and predicate locks in a database system},
year = {1976},
issue_date = {Nov. 1976},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/360363.360369},
doi = {10.1145/360363.360369},
abstract = {In database systems, users access shared data under the assumption that the data satisfies certain consistency constraints. This paper defines the concepts of transaction, consistency and schedule and shows that consistency requires that a transaction cannot request new locks after releasing a lock. Then it is argued that a transaction needs to lock a logical rather than a physical subset of the database. These subsets may be specified by predicates. An implementation of predicate locks which satisfies the consistency condition is suggested.},
journal = {Commun. ACM},
month = {nov},
pages = {624–633},
numpages = {10},
keywords = {transaction, lock, database, consistency, concurrancy}
}

@article{JacynthoS16,
  author       = {Mark Douglas Jacyntho and
                  Daniel Schwabe},
  title        = {A multigranularity locking model for {RDF}},
  journal      = {J. Web Semant.},
  volume       = {39},
  pages        = {25--46},
  year         = {2016},
  url          = {https://doi.org/10.1016/j.websem.2016.05.002},
  doi          = {10.1016/J.WEBSEM.2016.05.002},
  timestamp    = {Tue, 29 Jan 2019 12:27:04 +0100},
  biburl       = {https://dblp.org/rec/journals/ws/JacynthoS16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{majumdarLockAccolation,
  author       = {Michael Emmi and
                  Jeffrey S. Fischer and
                  Ranjit Jhala and
                  Rupak Majumdar},
  editor       = {Martin Hofmann and
                  Matthias Felleisen},
  title        = {Lock allocation},
  booktitle    = {Proceedings of the 34th {ACM} {SIGPLAN-SIGACT} Symposium on Principles
                  of Programming Languages, {POPL} 2007, Nice, France, January 17-19,
                  2007},
  pages        = {291--296},
  publisher    = {{ACM}},
  year         = {2007},
  url          = {https://doi.org/10.1145/1190216.1190260},
  doi          = {10.1145/1190216.1190260},
  timestamp    = {Fri, 25 Jun 2021 14:48:54 +0200},
  biburl       = {https://dblp.org/rec/conf/popl/EmmiFJM07.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{CareyDN93,
  author       = {Michael J. Carey and
                  David J. DeWitt and
                  Jeffrey F. Naughton},
  editor       = {Peter Buneman and
                  Sushil Jajodia},
  title        = {The oo7 Benchmark},
  booktitle    = {Proceedings of the 1993 {ACM} {SIGMOD} International Conference on
                  Management of Data, Washington, DC, USA, May 26-28, 1993},
  pages        = {12--21},
  publisher    = {{ACM} Press},
  year         = {1993},
  url          = {https://doi.org/10.1145/170035.170041},
  doi          = {10.1145/170035.170041},
  timestamp    = {Thu, 11 Mar 2021 15:20:15 +0100},
  biburl       = {https://dblp.org/rec/conf/sigmod/CareyDN93.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{prokopec_renaissance_2019,
	address = {New York, NY, USA},
	series = {{PLDI} 2019},
	title = {Renaissance: benchmarking suite for parallel applications on the {JVM}},
	isbn = {978-1-4503-6712-7},
	shorttitle = {Renaissance},
	url = {https://dl.acm.org/doi/10.1145/3314221.3314637},
	doi = {10.1145/3314221.3314637},
	abstract = {Established benchmark suites for the Java Virtual Machine (JVM), such as DaCapo, ScalaBench, and SPECjvm2008, lack workloads that take advantage of the parallel programming abstractions and concurrency primitives offered by the JVM and the Java Class Library. However, such workloads are fundamental for understanding the way in which modern applications and data-processing frameworks use the JVM's concurrency features, and for validating new just-in-time (JIT) compiler optimizations that enable more efficient execution of such workloads. We present Renaissance, a new benchmark suite composed of modern, real-world, concurrent, and object-oriented workloads that exercise various concurrency primitives of the JVM. We show that the use of concurrency primitives in these workloads reveals optimization opportunities that were not visible with the existing workloads. We use Renaissance to compare performance of two state-of-the-art, production-quality JIT compilers (HotSpot C2 and Graal), and show that the performance differences are more significant than on existing suites such as DaCapo and SPECjvm2008. We also use Renaissance to expose four new compiler optimizations, and we analyze the behavior of several existing ones. We use Renaissance to compare performance of two state-of-the-art, production-quality JIT compilers (HotSpot C2 and Graal), and show that the performance differences are more significant than on existing suites such as DaCapo and SPECjvm2008. We also use Renaissance to expose four new compiler optimizations, and we analyze the behavior of several existing ones.},
	urldate = {2024-06-17},
	booktitle = {Proceedings of the 40th {ACM} {SIGPLAN} {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {Association for Computing Machinery},
	author = {Prokopec, Aleksandar and Rosà, Andrea and Leopoldseder, David and Duboscq, Gilles and Tůma, Petr and Studener, Martin and Bulej, Lubomír and Zheng, Yudi and Villazón, Alex and Simon, Doug and Würthinger, Thomas and Binder, Walter},
	month = jun,
	year = {2019},
	keywords = {concurrency, benchmarks, Big Data benchmarks, functional programming benchmarks, JIT compilation, JVM, object-oriented programming benchmarks, parallelism},
	pages = {31--47},
	file = {Full Text PDF:/home/pandey/Nextcloud/zotero/storage/P4XMPT64/Prokopec et al. - 2019 - Renaissance benchmarking suite for parallel appli.pdf:application/pdf},
}

@article{vale_pot_2016,
	title = {Pot: {Deterministic} {Transactional} {Execution}},
	volume = {13},
	issn = {1544-3566, 1544-3973},
	shorttitle = {Pot},
	url = {https://dl.acm.org/doi/10.1145/3017993},
	doi = {10.1145/3017993},
	abstract = {This article presents Pot, a system that leverages the concept of preordered transactions to achieve deterministic multithreaded execution of programs that use Transactional Memory. Preordered transactions eliminate the root cause of nondeterminism in transactional execution: they provide the illusion of executing in a deterministic serial order, unlike traditional transactions that appear to execute in a nondeterministic order that can change from execution to execution. Pot uses a new concurrency control protocol that exploits the serialization order to distinguish between fast and speculative transaction execution modes in order to mitigate the overhead of imposing a deterministic order. We build two Pot prototypes: one using STM and another using off-the-shelf HTM. To the best of our knowledge, Pot enables deterministic execution of programs using off-the-shelf HTM for the first time. An experimental evaluation shows that Pot achieves deterministic execution of TM programs with low overhead, sometimes even outperforming nondeterministic executions, and clearly outperforming the state of the art.},
	language = {en},
	number = {4},
	urldate = {2024-06-17},
	journal = {ACM Transactions on Architecture and Code Optimization},
	author = {Vale, Tiago M. and Silva, João A. and Dias, Ricardo J. and Lourenço, João M.},
	month = dec,
	year = {2016},
	pages = {1--24},
	file = {Vale et al. - 2016 - Pot Deterministic Transactional Execution.pdf:/home/pandey/Nextcloud/zotero/storage/PX8XPUTA/Vale et al. - 2016 - Pot Deterministic Transactional Execution.pdf:application/pdf},
}

@inproceedings{felber_hardware_2016,
	address = {London United Kingdom},
	title = {Hardware read-write lock elision},
	isbn = {978-1-4503-4240-7},
	url = {https://dl.acm.org/doi/10.1145/2901318.2901346},
	doi = {10.1145/2901318.2901346},
	abstract = {Hardware Lock Elision (HLE) represents a promising technique to enhance parallelism of concurrent applications relying on conventional, lock-based synchronization. The idea at the basis of current HLE approaches is to wrap critical sections into hardware transactions: this allows critical sections to be executed in parallel using a speculative approach, while leveraging on conﬂict detection capabilities provided by hardware transactions to ensure equivalent semantics to pessimistic lock-based synchronization.},
	language = {en},
	urldate = {2024-06-17},
	booktitle = {Proceedings of the {Eleventh} {European} {Conference} on {Computer} {Systems}},
	publisher = {ACM},
	author = {Felber, Pascal and Issa, Shady and Matveev, Alexander and Romano, Paolo},
	month = apr,
	year = {2016},
	pages = {1--15},
	file = {Felber et al. - 2016 - Hardware read-write lock elision.pdf:/home/pandey/Nextcloud/zotero/storage/CYUMNCWE/Felber et al. - 2016 - Hardware read-write lock elision.pdf:application/pdf},
}

@article{carvalho_optimizing_2016,
	title = {Optimizing memory transactions for large-scale programs},
	volume = {89},
	issn = {0743-7315},
	url = {https://www.sciencedirect.com/science/article/pii/S0743731515002099},
	doi = {10.1016/j.jpdc.2015.12.001},
	abstract = {Even though Software Transactional Memory (STM) is one of the most promising approaches to simplify concurrent programming, current STM implementations incur significant overheads that render them impractical for many real-sized programs. The key insight of this work is that we do not need to use the same costly barriers for all the memory managed by a real-sized application, if only a small fraction of the memory is under contention—lightweight barriers may be used in this case. In this work, we propose a new solution based on an approach of adaptive object metadata (AOM) to promote the use of a fast path to access objects that are not under contention. We show that this approach is able to make the performance of an STM competitive with the best fine-grained lock-based approaches in some of the more challenging benchmarks.},
	urldate = {2024-06-17},
	journal = {Journal of Parallel and Distributed Computing},
	author = {Carvalho, Fernando Miguel and Cachopo, João},
	month = mar,
	year = {2016},
	keywords = {Concurrent programming, Runtime optimizations, Software Transactional Memory},
	pages = {13--24},
	file = {ScienceDirect Snapshot:/home/pandey/Nextcloud/zotero/storage/DNDHPITA/S0743731515002099.html:text/html},
}

@incollection{kim_scheduling_2015,
	address = {New York, NY},
	title = {On {Scheduling} in {Distributed} {Transactional} {Memory}: {Techniques} and {Tradeoffs}},
	isbn = {978-1-4939-2092-1},
	shorttitle = {On {Scheduling} in {Distributed} {Transactional} {Memory}},
	url = {https://doi.org/10.1007/978-1-4939-2092-1_44},
	abstract = {Data centers have been increasingly employed in distributed services to support a vast of amount of consumer requests. The requests range from web services to gaming for computation intensive applications. In order to process these requests, the data centers exploit in-memory data for high performance and ensure transactional properties for concurrent requests such as atomicity, consistency, and isolation. Traditionally lock-based synchronization has been used for the consistency of data, but is inherently error-prone. For example, coarse-grained locking, in which a large data structure is protected using a single lock is simple and easy to use, but permits little concurrency. In contrast, with fine-grained locking, in which each component of a data structure (e.g., a hash table bucket) is protected by a lock, programmers must acquire only necessary and sufficient locks to obtain maximum concurrency without compromising safety, and must avoid deadlocks when acquiring multiple locks. Both these situations are highly prone to programmer errors.},
	language = {en},
	urldate = {2024-06-17},
	booktitle = {Handbook on {Data} {Centers}},
	publisher = {Springer},
	author = {Kim, Junwhan and Palmieri, Roberto and Ravindran, Binoy},
	editor = {Khan, Samee U. and Zomaya, Albert Y.},
	year = {2015},
	doi = {10.1007/978-1-4939-2092-1_44},
	pages = {1267--1283},
}

@incollection{filipe_nested_2015,
	address = {Cham},
	title = {Nested {Parallelism} in {Transactional} {Memory}},
	isbn = {978-3-319-14720-8},
	url = {https://doi.org/10.1007/978-3-319-14720-8_9},
	abstract = {We are witnessing an increase in the parallel power of computers for the foreseeable future, which requires parallel programming tools and models that can take advantage of the higher number of hardware threads. For some applications, reaching up to such high parallelism requires going beyond the typical monolithic parallel model: it calls for exposing fine-grained parallel tasks that might exist in a program, possibly nested within memory transactions.},
	language = {en},
	urldate = {2024-06-17},
	booktitle = {Transactional {Memory}. {Foundations}, {Algorithms}, {Tools}, and {Applications}: {COST} {Action} {Euro}-{TM} {IC1001}},
	publisher = {Springer International Publishing},
	author = {Filipe, Ricardo and Barreto, João},
	editor = {Guerraoui, Rachid and Romano, Paolo},
	year = {2015},
	doi = {10.1007/978-3-319-14720-8_9},
	pages = {192--209},
}

@inproceedings{rito_props_2014,
	address = {Cham},
	title = {{ProPS}: {A} {Progressively} {Pessimistic} {Scheduler} for {Software} {Transactional} {Memory}},
	isbn = {978-3-319-09873-9},
	shorttitle = {{ProPS}},
	doi = {10.1007/978-3-319-09873-9_13},
	abstract = {Software Transactional Memory (STM) is one promising abstraction to simplify the task of writing highly parallel applications. Nonetheless, in workloads lacking enough parallelism, STM’s optimistic approach to concurrency control can adversely degrade performance as transactions abort and restart often.},
	language = {en},
	booktitle = {Euro-{Par} 2014 {Parallel} {Processing}},
	publisher = {Springer International Publishing},
	author = {Rito, Hugo and Cachopo, João},
	editor = {Silva, Fernando and Dutra, Inês and Santos Costa, Vítor},
	year = {2014},
	keywords = {Software Transactional Memory, Performance, Transaction Conflict, Transaction Scheduling},
	pages = {150--161},
	file = {Full Text PDF:/home/pandey/Nextcloud/zotero/storage/YDR7JAEE/Rito and Cachopo - 2014 - ProPS A Progressively Pessimistic Scheduler for S.pdf:application/pdf},
}


@inproceedings{FlexiGran2024,
  title     = {FlexiGran: Flexible Granularity Locking in Hierarchies},
  author    = {Anju Mongandampulath Akathoott and Rupesh Nasre},
  booktitle = {Proceedings of the Euro-Par 2024 Conference},
  year      = {2024},
  location  = {Madrid, Spain},
  pages     = {0--0},
  publisher = {Springer LNCS},
  address   = {IIT Madras, India}
}

@inproceedings{KalikarN18,
  author       = {Saurabh Kalikar and
                  Rupesh Nasre},
  title        = {NumLock: Towards Optimal Multi-Granularity Locking in Hierarchies},
  booktitle    = {Proceedings of the 47th International Conference on Parallel Processing,
                  {ICPP} 2018, Eugene, OR, USA, August 13-16, 2018},
  pages        = {75:1--75:10},
  publisher    = {{ACM}},
  year         = {2018},
  url          = {https://doi.org/10.1145/3225058.3225141},
  doi          = {10.1145/3225058.3225141},
  timestamp    = {Wed, 21 Nov 2018 12:44:17 +0100},
  biburl       = {https://dblp.org/rec/conf/icpp/KalikarN18.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{GaneshKN18,
  author       = {K. Ganesh and
                  Saurabh Kalikar and
                  Rupesh Nasre},
  editor       = {Marco Aldinucci and
                  Luca Padovani and
                  Massimo Torquati},
  title        = {Multi-granularity Locking in Hierarchies with Synergistic Hierarchical
                  and Fine-Grained Locks},
  booktitle    = {Euro-Par 2018: Parallel Processing - 24th International Conference
                  on Parallel and Distributed Computing, Turin, Italy, August 27-31,
                  2018, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {11014},
  pages        = {546--559},
  publisher    = {Springer},
  year         = {2018},
  url          = {https://doi.org/10.1007/978-3-319-96983-1\_39},
  doi          = {10.1007/978-3-319-96983-1\_39},
  timestamp    = {Tue, 14 May 2019 10:00:46 +0200},
  biburl       = {https://dblp.org/rec/conf/europar/GaneshKN18.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@book{DBLP:books/daglib/0030596,
  author       = {Michel Raynal},
  title        = {Concurrent Programming - Algorithms, Principles, and Foundations},
  publisher    = {Springer},
  year         = {2013},
  url          = {https://doi.org/10.1007/978-3-642-32027-9},
  doi          = {10.1007/978-3-642-32027-9},
  isbn         = {978-3-642-32026-2},
  timestamp    = {Tue, 16 May 2017 14:01:41 +0200},
  biburl       = {https://dblp.org/rec/books/daglib/0030596.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@ARTICLE{IBMIMS,
  author={Blackman, K. R.},
  journal={IBM Systems Journal}, 
  title={Technical note: IMS celebrates thirty years as an IBM product}, 
  year={1998},
  volume={37},
  number={4},
  pages={596-603},
  keywords={},
  doi={10.1147/sj.374.0596}}

  @book{DBLP:books/daglib/0006734,
  author       = {C. J. Date},
  title        = {An introduction to database systems {(7.} ed.)},
  publisher    = {Addison-Wesley-Longman},
  year         = {2000},
  isbn         = {978-0-201-68419-3},
  timestamp    = {Sat, 15 May 2021 14:27:08 +0200},
  biburl       = {https://dblp.org/rec/books/daglib/0006734.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@book{DBLP:books/mk/BunemanSA99,
  author       = {Serge Abiteboul and
                  Peter Buneman and
                  Dan Suciu},
  title        = {Data on the Web: From Relations to Semistructured Data and {XML}},
  publisher    = {Morgan Kaufmann},
  year         = {1999},
  isbn         = {1-55860-622-X},
  timestamp    = {Thu, 03 Jan 2002 11:51:30 +0100},
  biburl       = {https://dblp.org/rec/books/mk/BunemanSA99.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@book{DBLP:books/daglib/0027893,
  author       = {Lars George},
  title        = {HBase - The Definitive Guide: Random Access to Your Planet-Size Data},
  publisher    = {O'Reilly},
  year         = {2011},
  url          = {http://www.oreilly.de/catalog/9781449396107/index.html},
  isbn         = {978-1-449-39610-7},
  timestamp    = {Wed, 25 Jan 2023 16:59:39 +0100},
  biburl       = {https://dblp.org/rec/books/daglib/0027893.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{BayerS77,
  author       = {Rudolf Bayer and
                  Mario Schkolnick},
  title        = {Concurrency of Operations on B-Trees},
  journal      = {Acta Informatica},
  volume       = {9},
  pages        = {1--21},
  year         = {1977},
  url          = {https://doi.org/10.1007/BF00263762},
  doi          = {10.1007/BF00263762},
  timestamp    = {Sun, 21 Jun 2020 17:37:58 +0200},
  biburl       = {https://dblp.org/rec/journals/acta/BayerS77.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{LeisH019,
  author       = {Viktor Leis and
                  Michael Haubenschild and
                  Thomas Neumann},
  title        = {Optimistic Lock Coupling: {A} Scalable and Efficient General-Purpose
                  Synchronization Method},
  journal      = {{IEEE} Data Eng. Bull.},
  volume       = {42},
  number       = {1},
  pages        = {73--84},
  year         = {2019},
  url          = {http://sites.computer.org/debull/A19mar/p73.pdf},
  timestamp    = {Tue, 10 Mar 2020 16:23:50 +0100},
  biburl       = {https://dblp.org/rec/journals/debu/LeisH019.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@article{LehmanY81,
  author       = {Philip L. Lehman and
                  S. Bing Yao},
  title        = {Efficient Locking for Concurrent Operations on B-Trees},
  journal      = {{ACM} Trans. Database Syst.},
  volume       = {6},
  number       = {4},
  pages        = {650--670},
  year         = {1981},
  url          = {https://doi.org/10.1145/319628.319663},
  doi          = {10.1145/319628.319663},
  timestamp    = {Wed, 14 Nov 2018 10:42:12 +0100},
  biburl       = {https://dblp.org/rec/journals/tods/LehmanY81.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

